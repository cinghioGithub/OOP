package ereditarieta;

import java.util.Arrays;
import java.util.Comparator;

public class EsSort {
	
	static class Pippo {
		int i;
	}

	public static void main(String[] args) {
		
		String[] as = { "z","d","k","r","a" };
		
		sort(as);
		
		for(String s : as) {
			System.out.print(s+" ");
		}
		
//		Pippo[] arp = { new Pippo(), new Pippo(), new Pippo() };
//		//sort(arp);
//		sortAry(arp);
//		Arrays.sort(arp);
		
		String frase = "Many classes or algorithm has a stable"+
						" core and several behavioural variations " + 
						"The operation performed may vary";
		String[] parole = frase.split(" ");
		
		Arrays.sort(parole);
		
		for(String p : parole) System.out.println(p);
		
		Arrays.sort(parole, new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {
				String s1 = (String)o1;
				String s2 = (String)o2;
				return s1.length() - s2.length();
			}
		});
		
		for(String p : parole) System.out.println(p);

		Arrays.sort(parole, new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {
				String s1 = (String)o1;
				String s2 = (String)o2;
				return s2.length() - s1.length();
			}
		});
		// 
		Arrays.sort(parole, (Object o1, Object o2) -> {
			String s1 = (String)o1;
			String s2 = (String)o2;
			return s2.length() - s1.length();
		});
				
		for(String p : parole) System.out.println(p);
		
		
		Comparator.
			naturalOrder().  // static method of Comparator
			reversed();		 // default method of Comparator


	}
	
	static Comparator reversed(Comparator original) {
		// TODO: implement it
		return null;
	}

	public static void sort(Comparable v[]) {
		for (int i = 1; i < v.length; ++i)
			for (int j = 0; j < v.length - i; ++j) {
				if ( v[j].compareTo(v[j+1]) > 0) {
					Comparable o = v[j];
					v[j] = v[j + 1];
					v[j + 1] = o;
				}
			}
	}

	public static void sortAry(Object v[]) {
		for (int i = 1; i < v.length; ++i)
			for (int j = 0; j < v.length - i; ++j) {
				Comparable elemento = (Comparable) v[j];
				if ( elemento.compareTo(v[j+1]) > 0) {
					Object o = v[j];
					v[j] = v[j + 1];
					v[j + 1] = o;
				}
			}
	}

	public static void sortAry(Object v[], Comparator cmp) {
		for (int i = 1; i < v.length; ++i)
			for (int j = 0; j < v.length - i; ++j) {
				if ( cmp.compare( v[j] , v[j+1]) > 0) {
					Object o = v[j];
					v[j] = v[j + 1];
					v[j + 1] = o;
				}
			}
	}
}
