package clinic;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Represents a clinic with patients and doctors.
 * 
 */
public class Clinic {
	
	Map<String, Patient> PatientList = new HashMap<>();
	Map<Integer, Doctor> DoctorList = new HashMap<>();
	/**
	 * Add a new clinic patient.
	 * 
	 * @param first first name of the patient
	 * @param last last name of the patient
	 * @param ssn SSN number of the patient
	 */
	public void addPatient(String first, String last, String ssn) {
		// TODO Complete method
		Patient p = new Patient(first, last, ssn);
		
		this.PatientList.put(ssn, p);
	}


	/**
	 * Retrieves a patient information
	 * 
	 * @param ssn SSN of the patient
	 * @return the object representing the patient
	 * @throws NoSuchPatient in case of no patient with matching SSN
	 */
	public String getPatient(String ssn) throws NoSuchPatient {
		// TODO Complete method
		Patient p = this.PatientList.get(ssn);
		
		if(p == null) {
			throw new NoSuchPatient("Paziente non presente.");
		}
		
		return p.getLast() + " " + p.getFirst() + " (" + p.getSSN() + ")";
	}

	/**
	 * Add a new doctor working at the clinic
	 * 
	 * @param first first name of the doctor
	 * @param last last name of the doctor
	 * @param ssn SSN number of the doctor
	 * @param docID unique ID of the doctor
	 * @param specialization doctor's specialization
	 */
	public void addDoctor(String first, String last, String ssn, int docID, String specialization) {
		// TODO Complete method
		Doctor d = new Doctor(first, last, ssn, docID, specialization);
		
		this.DoctorList.put(docID, d);
	}

	/**
	 * Retrieves information about a doctor
	 * 
	 * @param docID ID of the doctor
	 * @return object with information about the doctor
	 * @throws NoSuchDoctor in case no doctor exists with a matching ID
	 */
	public String getDoctor(int docID) throws NoSuchDoctor {
		// TODO Complete method
		Doctor d = this.DoctorList.get(docID);
		
		if (d == null) {
			throw new NoSuchDoctor("Dottore non presente.");
		}
		
		return d.getLast() + " " + d.getFirst() + " (" + d.getSSN() + ") [" + d.getID() + "] :" + d.getSpecialization();
	}
	
	/**
	 * Assign a given doctor to a patient
	 * 
	 * @param ssn SSN of the patient
	 * @param docID ID of the doctor
	 * @throws NoSuchPatient in case of not patient with matching SSN
	 * @throws NoSuchDoctor in case no doctor exists with a matching ID
	 */
	public void assignPatientToDoctor(String ssn, int docID) throws NoSuchPatient, NoSuchDoctor {
		// TODO Complete method
		Doctor d = this.DoctorList.get(docID);
		Patient p = this.PatientList.get(ssn);
		
		if (d == null) {
			throw new NoSuchDoctor("Dottore non presente.");
		}
		if(p == null) {
			throw new NoSuchPatient("Paziente non presente.");
		}
		
		d.getMyPatients().add(p);
		p.setMyDoctor(d);
	}
	
	/**
	 * Retrieves the id of the doctor assigned to a given patient.
	 * 
	 * @param ssn SSN of the patient
	 * @return id of the doctor
	 * @throws NoSuchPatient in case of not patient with matching SSN
	 * @throws NoSuchDoctor in case no doctor has been assigned to the patient
	 */
	public int getAssignedDoctor(String ssn) throws NoSuchPatient, NoSuchDoctor {
		// TODO Complete method
		Patient p = this.PatientList.get(ssn);
		Doctor d = null;
		
		if(p == null) {
			throw new NoSuchPatient("Paziente non presente.");
		}
		
		if ((d = p.getMyDoctor()) == null )  {
			throw new NoSuchDoctor("Dottore non presente.");
		}
		return d.getID();
	}
	
	/**
	 * Retrieves the patients assigned to a doctor
	 * 
	 * @param id ID of the doctor
	 * @return collection of patient SSNs
	 * @throws NoSuchDoctor in case the {@code id} does not match any doctor 
	 */
	public Collection<String> getAssignedPatients(int id) throws NoSuchDoctor {
		// TODO Complete method
		Doctor d = this.DoctorList.get(id);
		
		if (d == null) {
			throw new NoSuchDoctor("Dottore non presente.");
		}
		
		return d.getMyPatients().stream().map(Patient::getSSN).collect(Collectors.toList());
	}


	/**
	 * Loads data about doctors and patients from the given stream.
	 * <p>
	 * The text file is organized by rows, each row contains info about
	 * either a patient or a doctor.</p>
	 * <p>
	 * Rows containing a patient's info begin with letter {@code "P"} followed by first name,
	 * last name, and SSN. Rows containing doctor's info start with letter {@code "M"},
	 * followed by badge ID, first name, last name, SSN, and specialization.<br>
	 * The elements on a line are separated by the {@code ';'} character possibly
	 * surrounded by spaces that should be ignored.</p>
	 * <p>
	 * In case of error in the data present on a given row, the method should be able
	 * to ignore the row and skip to the next one.<br>

	 * 
	 * @param readed linked to the file to be read
	 * @throws IOException in case of IO error
	 */
	public void loadData(Reader reader) throws IOException {
		// TODO Complete method
		BufferedReader r = new BufferedReader(reader);
		String s = null;
		String[] buff = null;
		
		while((s = r.readLine()) != null) {
			if(s.charAt(0) == 'M') {
				if((buff = s.split("[ ;]+")).length == 6) {
					this.addDoctor(buff[2], buff[3], buff[4], Integer.parseInt(buff[1]), buff[5]);
				}
			}
			else {
				if(s.charAt(0) == 'P') {
					if((buff = s.split("[ ;]+")).length == 4) {
						this.addPatient(buff[1], buff[2], buff[3]);
					}
				}
			}
		}
		
		r.close();

	}




	/**
	 * Retrieves the collection of doctors that have no patient at all.
	 * The doctors are returned sorted in alphabetical order
	 * 
	 * @return the collection of doctors' ids
	 */
	public Collection<Integer> idleDoctors(){
		// TODO Complete method
		return this.DoctorList.entrySet().stream().filter(d -> d.getValue().getMyPatients().size()==0).sorted((a,b) -> {
			String s1 = a.getValue().getLast() + a.getValue().getFirst();
			String s2 = b.getValue().getLast() + b.getValue().getFirst();
			
			return s1.compareTo(s2);
		}).map(d -> d.getValue().getID()).collect(Collectors.toList());
	}

	/**
	 * Retrieves the collection of doctors having a number of patients larger than the average.
	 * 
	 * @return  the collection of doctors' ids
	 */
	public Collection<Integer> busyDoctors(){
		// TODO Complete method
		Double avg = this.DoctorList.entrySet().stream().mapToDouble(d -> d.getValue().getMyPatients().size()).average().getAsDouble();
		return this.DoctorList.entrySet().stream().filter(d -> d.getValue().getMyPatients().size() > avg).map(d -> d.getValue().getID()).collect(Collectors.toList());
	}

	/**
	 * Retrieves the information about doctors and relative number of assigned patients.
	 * <p>
	 * The method returns list of strings formatted as "{@code ### : ID SURNAME NAME}" where {@code ###}
	 * represent the number of patients (printed on three characters).
	 * <p>
	 * The list is sorted by decreasing number of patients.
	 * 
	 * @return the collection of strings with information about doctors and patients count
	 */
	public Collection<String> doctorsByNumPatients(){
		// TODO Complete method
		
		//.sorted((a,b) -> b.compareTo(a)).collect(Collectors.toList())
		
		Stream<String> s = this.DoctorList.entrySet().stream().map(d -> String.format("%3d : %d %s %s", d.getValue().getMyPatients().size(), d.getValue().getID(), d.getValue().getLast(), d.getValue().getFirst()));
		
		return s.sorted((a,b) -> b.compareTo(a)).collect(Collectors.toList());
	}
	
	/**
	 * Retrieves the number of patients per (their doctor's)  speciality
	 * <p>
	 * The information is a collections of strings structured as {@code ### - SPECIALITY}
	 * where {@code SPECIALITY} is the name of the speciality and 
	 * {@code ###} is the number of patients cured by doctors with such speciality (printed on three characters).
	 * <p>
	 * The elements are sorted first by decreasing count and then by alphabetic speciality.
	 * 
	 * @return the collection of strings with speciality and patient count information.
	 */
	public Collection<String> countPatientsPerSpecialization(){
		// TODO Complete method
		
		Map<String, List<Doctor>> m = this.DoctorList.values().stream().collect(Collectors.groupingBy(Doctor::getSpecialization));
		
		Map<String, Integer> ris = new HashMap<>();
		int c = 0;
		
		for(Entry<String, List<Doctor>> str : m.entrySet()) {
			c = 0;
			for(Doctor d : str.getValue()) {
				c += d.getMyPatients().size();
			}
			ris.put(str.getKey(), c);
		}
		
		return ris.entrySet().stream().map(d -> d.getValue() + " - " + d.getKey()).sorted((a, b) -> {
			String s1 = a.substring(0, 3);
			String s2 = b.substring(0, 3);
			
			int cmp = s2.compareTo(s1);
			
			if(cmp == 0) {
				s1 = a.substring(6, a.length());
				s2 = b.substring(6, b.length());
				
				cmp = s1.compareTo(s2);
			}
			
			return cmp;
		}).collect(Collectors.toList());
	}
	
	//aggiunto per test
	public Map<String, Patient> getPatients(){
		return this.PatientList;
	}
	
	public Map<Integer, Doctor> getDoctors(){
		return this.DoctorList;
	}
	
}
